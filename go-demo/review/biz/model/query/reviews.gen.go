// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"reviews/biz/model/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newReview(db *gorm.DB) review {
	_review := review{}

	_review.reviewDo.UseDB(db)
	_review.reviewDo.UseModel(&model.Review{})

	tableName := _review.reviewDo.TableName()
	_review.ALL = field.NewField(tableName, "*")
	_review.ID = field.NewInt64(tableName, "id")
	_review.Name = field.NewString(tableName, "name")
	_review.GoodsID = field.NewInt64(tableName, "goods_id")
	_review.Content = field.NewString(tableName, "content")
	_review.Author = field.NewString(tableName, "author")

	_review.fillFieldMap()

	return _review
}

type review struct {
	reviewDo

	ALL     field.Field
	ID      field.Int64
	Name    field.String
	GoodsID field.Int64
	Content field.String
	Author  field.String

	fieldMap map[string]field.Expr
}

func (r review) As(alias string) *review {
	r.reviewDo.DO = *(r.reviewDo.As(alias).(*gen.DO))

	r.ALL = field.NewField(alias, "*")
	r.ID = field.NewInt64(alias, "id")
	r.Name = field.NewString(alias, "name")
	r.GoodsID = field.NewInt64(alias, "goods_id")
	r.Content = field.NewString(alias, "content")
	r.Author = field.NewString(alias, "author")

	r.fillFieldMap()

	return &r
}

func (r *review) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	f, ok := r.fieldMap[fieldName]
	return f.(field.OrderExpr), ok
}

func (r *review) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["goods_id"] = r.GoodsID
	r.fieldMap["content"] = r.Content
	r.fieldMap["author"] = r.Author
}

func (r review) clone(db *gorm.DB) review {
	r.reviewDo.ReplaceDB(db)
	return r
}

type reviewDo struct{ gen.DO }

func (r reviewDo) Debug() *reviewDo {
	return r.withDO(r.DO.Debug())
}

func (r reviewDo) WithContext(ctx context.Context) *reviewDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reviewDo) Clauses(conds ...clause.Expression) *reviewDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reviewDo) Not(conds ...gen.Condition) *reviewDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reviewDo) Or(conds ...gen.Condition) *reviewDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reviewDo) Select(conds ...field.Expr) *reviewDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reviewDo) Where(conds ...gen.Condition) *reviewDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reviewDo) Order(conds ...field.Expr) *reviewDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reviewDo) Distinct(cols ...field.Expr) *reviewDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reviewDo) Omit(cols ...field.Expr) *reviewDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reviewDo) Join(table schema.Tabler, on ...field.Expr) *reviewDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reviewDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reviewDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reviewDo) RightJoin(table schema.Tabler, on ...field.Expr) *reviewDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reviewDo) Group(cols ...field.Expr) *reviewDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reviewDo) Having(conds ...gen.Condition) *reviewDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reviewDo) Limit(limit int) *reviewDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reviewDo) Offset(offset int) *reviewDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reviewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reviewDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reviewDo) Unscoped() *reviewDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reviewDo) Create(values ...*model.Review) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reviewDo) CreateInBatches(values []*model.Review, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reviewDo) Save(values ...*model.Review) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reviewDo) First() (*model.Review, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) Take() (*model.Review, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) Last() (*model.Review, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) Find() ([]*model.Review, error) {
	result, err := r.DO.Find()
	return result.([]*model.Review), err
}

func (r reviewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Review, err error) {
	buf := make([]*model.Review, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reviewDo) FindInBatches(result *[]*model.Review, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reviewDo) Attrs(attrs ...field.AssignExpr) *reviewDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reviewDo) Assign(attrs ...field.AssignExpr) *reviewDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reviewDo) Joins(field field.RelationField) *reviewDo {
	return r.withDO(r.DO.Joins(field))
}

func (r reviewDo) Preload(field field.RelationField) *reviewDo {
	return r.withDO(r.DO.Preload(field))
}

func (r reviewDo) FirstOrInit() (*model.Review, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) FirstOrCreate() (*model.Review, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) FindByPage(offset int, limit int) (result []*model.Review, count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	result, err = r.Offset(offset).Limit(limit).Find()
	return
}

func (r reviewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r *reviewDo) withDO(do gen.Dao) *reviewDo {
	r.DO = *do.(*gen.DO)
	return r
}

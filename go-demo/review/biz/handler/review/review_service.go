// Code generated by hertz generator.

package review

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"reviews/biz/model/model"
	"reviews/biz/model/query"
	"reviews/biz/model/review"
	"reviews/biz/pack"
	"reviews/cmd/api/rpc/rating"
	rating2 "reviews/cmd/api/rpc/rating/kitex_gen/rating"
)

// GetReview .
// @router /review/v1.0/detail [GET]
// @Summary 获取评论详情
// @Description 获取评论详情
// @Accept application/json
// @Produce application/json
// @Success 200 {object} review.QueryReviewResp
// @Param goods_id query int true "商品ID，一个商品有多个评论"
// @Param page query int true "页码"
// @Param page_size query int true "每页条数"
func GetReview(ctx context.Context, c *app.RequestContext) {
	var err error
	var req review.QueryReviewReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(review.QueryReviewResp)
	u := query.Review
	m := query.Review.WithContext(ctx)
	if req.GoodsID != 0 {
		m = m.Where(u.GoodsID.Eq(req.GoodsID))
	}
	if req.Keyword != "" {
		m = m.Where(u.Content.Like("%" + req.Keyword + "%"))
	}

	var total int64
	total, err = m.Count()
	if err != nil {
		resp.Code = review.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	var reviews []*model.Review
	if total > 0 {
		reviews, err = m.Limit(int(req.PageSize)).Offset(int(req.PageSize * (req.Page - 1))).Find()
		if err != nil {
			resp.Code = review.Code_DBErr
			resp.Msg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
	}
	// rpc 调用

	getRating, err := rating.GetRating(ctx, &rating2.QueryRatingReq{
		GoodsID:  req.GoodsID,
		Page:     req.Page,
		PageSize: req.PageSize,
	})
	if err != nil {
		resp.Code = review.Code_InternalErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	var star = int64(0)
	if getRating.Data != nil {

		var sum int64 = 0
		for _, v := range getRating.Data.Rating {
			sum += v.Star
		}
		star = sum / int64(len(getRating.Data.Rating))
	}

	resp.Code = review.Code_Success
	resp.Msg = "success"
	resp.Data = new(review.Data)
	resp.Data.Total = total
	resp.Data.Star = star
	resp.Data.Review = pack.Reviews(reviews)
	c.JSON(consts.StatusOK, resp)
}

// CreateReview .
// @router /review/v1.0/create [POST]
// @Summary 增加评论
// @Description 增加评论
// @Accept application/json
// @Produce application/json
// @Success 200 {object} review.CreateReviewResp
// @Param goods_id body int true "商品ID"
// @Param content body string true "评论内容"
// @Param author body string true "评论作者"
// @Param name body string true "评论名称"
// @Param star body int true "评论星级"
func CreateReview(ctx context.Context, c *app.RequestContext) {
	var err error
	var req review.CreateReviewReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(review.CreateReviewResp)
	r := &model.Review{
		Name:    req.Name,
		GoodsID: req.GoodsID,
		Content: req.Content,
		Author:  req.Author,
	}
	err = query.Review.WithContext(ctx).Create(r)
	if err != nil {
		resp.Code = review.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	_, err = rating.CreateRating(ctx, &rating2.CreateRatingReq{
		GoodsID:  req.GoodsID,
		Star:     req.Star,
		ReviewID: r.ID,
	})
	if err != nil {
		resp.Code = review.Code_InternalErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Code = review.Code_Success
	resp.Msg = "success"
	c.JSON(consts.StatusOK, resp)
}

// UpdateReview .
// @router /review/v1.0/update:review_id [POST]
// @Summary 修改评论
// @Description  修改评论
// @Accept application/json
// @Produce application/json
// @Success 200 {object} review.UpdateReviewResp
// @Param review_id body int true "评论ID"
// @Param goods_id body int true "商品ID"
// @Param content body string true "评论内容"
// @Param author body string true "评论作者"
// @Param name body string true "评论名称"
// @Param star body int true "评论星级"
func UpdateReview(ctx context.Context, c *app.RequestContext) {
	var err error
	var req review.UpdateReviewReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(review.UpdateReviewResp)
	u := &model.Review{}
	u.ID = req.ID
	u.Name = req.Name
	u.GoodsID = req.GoodsID
	u.Content = req.Content
	u.Author = req.Author
	_, err = query.Review.WithContext(ctx).Updates(u)
	if err != nil {
		resp.Code = review.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	r, err := rating.GetRating(ctx, &rating2.QueryRatingReq{
		GoodsID:  req.GoodsID,
		ReviewID: req.ID,
		Page:     1,
		PageSize: 1,
	})
	if err != nil {
		resp.Code = review.Code_InternalErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	_, err = rating.UpdateRating(ctx, &rating2.UpdateRatingReq{
		Id:       r.Data.Rating[0].Id,
		GoodsID:  req.GoodsID,
		Star:     req.Star,
		ReviewID: req.ID,
	})
	if err != nil {
		resp.Code = review.Code_InternalErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Code = review.Code_Success
	resp.Msg = "success"
	c.JSON(consts.StatusOK, resp)
}

// DeleteReview .
// @router /review/v1.0/delete:review_id [POST]
// @Summary  删除评论
// @Description 删除评论
// @Accept application/json
// @Produce application/json
// @Success 200 {object} review.DeleteReviewResp
// @Param review_id path int true "评论ID"
func DeleteReview(ctx context.Context, c *app.RequestContext) {
	var err error
	var req review.DeleteReviewReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(review.DeleteReviewResp)
	_, err = query.Review.WithContext(ctx).Where(query.Review.ID.Eq(req.ID)).Delete()
	if err != nil {
		resp.Code = review.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	ratings, err := rating.GetRating(ctx, &rating2.QueryRatingReq{
		ReviewID: req.ID,
		Page:     1,
		PageSize: 1,
	})
	if err != nil {
		resp.Code = review.Code_InternalErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	_, err = rating.DeleteRating(ctx, &rating2.DeleteRatingReq{
		Id: ratings.Data.Rating[0].Id,
	})
	if err != nil {
		resp.Code = review.Code_InternalErr
		resp.Msg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Code = review.Code_Success
	resp.Msg = "success"

	c.JSON(consts.StatusOK, resp)
}

// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package rating

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Rating) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Rating[number], err)
}

func (x *Rating) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Rating) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ReviewID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Rating) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Star, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Rating) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.GoodsID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Rating) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Average, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateRatingReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateRatingReq[number], err)
}

func (x *CreateRatingReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ReviewID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateRatingReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Star, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateRatingReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.GoodsID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateRatingResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateRatingResp[number], err)
}

func (x *CreateRatingResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Code = Code(v)
	return offset, nil
}

func (x *CreateRatingResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QueryRatingReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryRatingReq[number], err)
}

func (x *QueryRatingReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ReviewID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QueryRatingReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.GoodsID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QueryRatingReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QueryRatingReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Data) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Data[number], err)
}

func (x *Data) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Rating
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Rating = append(x.Rating, &v)
	return offset, nil
}

func (x *Data) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QueryRatingResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryRatingResp[number], err)
}

func (x *QueryRatingResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Code = Code(v)
	return offset, nil
}

func (x *QueryRatingResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QueryRatingResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Data
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *DeleteRatingReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteRatingReq[number], err)
}

func (x *DeleteRatingReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteRatingResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteRatingResp[number], err)
}

func (x *DeleteRatingResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Code = Code(v)
	return offset, nil
}

func (x *DeleteRatingResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateRatingReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateRatingReq[number], err)
}

func (x *UpdateRatingReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateRatingReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ReviewID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateRatingReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Star, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateRatingReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.GoodsID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateRatingResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateRatingResp[number], err)
}

func (x *UpdateRatingResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Code = Code(v)
	return offset, nil
}

func (x *UpdateRatingResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Rating) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Rating) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Rating) fastWriteField2(buf []byte) (offset int) {
	if x.ReviewID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetReviewID())
	return offset
}

func (x *Rating) fastWriteField3(buf []byte) (offset int) {
	if x.Star == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStar())
	return offset
}

func (x *Rating) fastWriteField4(buf []byte) (offset int) {
	if x.GoodsID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetGoodsID())
	return offset
}

func (x *Rating) fastWriteField5(buf []byte) (offset int) {
	if x.Average == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetAverage())
	return offset
}

func (x *CreateRatingReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateRatingReq) fastWriteField1(buf []byte) (offset int) {
	if x.ReviewID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetReviewID())
	return offset
}

func (x *CreateRatingReq) fastWriteField2(buf []byte) (offset int) {
	if x.Star == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetStar())
	return offset
}

func (x *CreateRatingReq) fastWriteField3(buf []byte) (offset int) {
	if x.GoodsID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetGoodsID())
	return offset
}

func (x *CreateRatingResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateRatingResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetCode()))
	return offset
}

func (x *CreateRatingResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *QueryRatingReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *QueryRatingReq) fastWriteField1(buf []byte) (offset int) {
	if x.ReviewID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetReviewID())
	return offset
}

func (x *QueryRatingReq) fastWriteField2(buf []byte) (offset int) {
	if x.GoodsID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetGoodsID())
	return offset
}

func (x *QueryRatingReq) fastWriteField3(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetPage())
	return offset
}

func (x *QueryRatingReq) fastWriteField4(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetPageSize())
	return offset
}

func (x *Data) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Data) fastWriteField1(buf []byte) (offset int) {
	if x.Rating == nil {
		return offset
	}
	for i := range x.GetRating() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetRating()[i])
	}
	return offset
}

func (x *Data) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *QueryRatingResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *QueryRatingResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetCode()))
	return offset
}

func (x *QueryRatingResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *QueryRatingResp) fastWriteField3(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetData())
	return offset
}

func (x *DeleteRatingReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteRatingReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteRatingResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteRatingResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetCode()))
	return offset
}

func (x *DeleteRatingResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *UpdateRatingReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *UpdateRatingReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateRatingReq) fastWriteField2(buf []byte) (offset int) {
	if x.ReviewID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetReviewID())
	return offset
}

func (x *UpdateRatingReq) fastWriteField3(buf []byte) (offset int) {
	if x.Star == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStar())
	return offset
}

func (x *UpdateRatingReq) fastWriteField4(buf []byte) (offset int) {
	if x.GoodsID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetGoodsID())
	return offset
}

func (x *UpdateRatingResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateRatingResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetCode()))
	return offset
}

func (x *UpdateRatingResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *Rating) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Rating) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Rating) sizeField2() (n int) {
	if x.ReviewID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetReviewID())
	return n
}

func (x *Rating) sizeField3() (n int) {
	if x.Star == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStar())
	return n
}

func (x *Rating) sizeField4() (n int) {
	if x.GoodsID == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetGoodsID())
	return n
}

func (x *Rating) sizeField5() (n int) {
	if x.Average == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetAverage())
	return n
}

func (x *CreateRatingReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateRatingReq) sizeField1() (n int) {
	if x.ReviewID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetReviewID())
	return n
}

func (x *CreateRatingReq) sizeField2() (n int) {
	if x.Star == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetStar())
	return n
}

func (x *CreateRatingReq) sizeField3() (n int) {
	if x.GoodsID == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetGoodsID())
	return n
}

func (x *CreateRatingResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateRatingResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetCode()))
	return n
}

func (x *CreateRatingResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *QueryRatingReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *QueryRatingReq) sizeField1() (n int) {
	if x.ReviewID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetReviewID())
	return n
}

func (x *QueryRatingReq) sizeField2() (n int) {
	if x.GoodsID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetGoodsID())
	return n
}

func (x *QueryRatingReq) sizeField3() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetPage())
	return n
}

func (x *QueryRatingReq) sizeField4() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetPageSize())
	return n
}

func (x *Data) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Data) sizeField1() (n int) {
	if x.Rating == nil {
		return n
	}
	for i := range x.GetRating() {
		n += fastpb.SizeMessage(1, x.GetRating()[i])
	}
	return n
}

func (x *Data) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *QueryRatingResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *QueryRatingResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetCode()))
	return n
}

func (x *QueryRatingResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *QueryRatingResp) sizeField3() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetData())
	return n
}

func (x *DeleteRatingReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteRatingReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *DeleteRatingResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteRatingResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetCode()))
	return n
}

func (x *DeleteRatingResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *UpdateRatingReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *UpdateRatingReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UpdateRatingReq) sizeField2() (n int) {
	if x.ReviewID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetReviewID())
	return n
}

func (x *UpdateRatingReq) sizeField3() (n int) {
	if x.Star == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStar())
	return n
}

func (x *UpdateRatingReq) sizeField4() (n int) {
	if x.GoodsID == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetGoodsID())
	return n
}

func (x *UpdateRatingResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateRatingResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetCode()))
	return n
}

func (x *UpdateRatingResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

var fieldIDToName_Rating = map[int32]string{
	1: "Id",
	2: "ReviewID",
	3: "Star",
	4: "GoodsID",
	5: "Average",
}

var fieldIDToName_CreateRatingReq = map[int32]string{
	1: "ReviewID",
	2: "Star",
	3: "GoodsID",
}

var fieldIDToName_CreateRatingResp = map[int32]string{
	1: "Code",
	2: "Msg",
}

var fieldIDToName_QueryRatingReq = map[int32]string{
	1: "ReviewID",
	2: "GoodsID",
	3: "Page",
	4: "PageSize",
}

var fieldIDToName_Data = map[int32]string{
	1: "Rating",
	2: "Total",
}

var fieldIDToName_QueryRatingResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Data",
}

var fieldIDToName_DeleteRatingReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteRatingResp = map[int32]string{
	1: "Code",
	2: "Msg",
}

var fieldIDToName_UpdateRatingReq = map[int32]string{
	1: "Id",
	2: "ReviewID",
	3: "Star",
	4: "GoodsID",
}

var fieldIDToName_UpdateRatingResp = map[int32]string{
	1: "Code",
	2: "Msg",
}

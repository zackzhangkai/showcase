// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ratings/biz/model/model"
)

func newRating(db *gorm.DB, opts ...gen.DOOption) rating {
	_rating := rating{}

	_rating.ratingDo.UseDB(db, opts...)
	_rating.ratingDo.UseModel(&model.Rating{})

	tableName := _rating.ratingDo.TableName()
	_rating.ALL = field.NewAsterisk(tableName)
	_rating.ID = field.NewInt64(tableName, "id")
	_rating.ReviewID = field.NewInt64(tableName, "review_id")
	_rating.Star = field.NewInt64(tableName, "star")
	_rating.GoodsID = field.NewInt64(tableName, "goods_id")
	_rating.Average = field.NewInt64(tableName, "average")

	_rating.fillFieldMap()

	return _rating
}

type rating struct {
	ratingDo

	ALL      field.Asterisk
	ID       field.Int64
	ReviewID field.Int64
	Star     field.Int64
	GoodsID  field.Int64
	Average  field.Int64

	fieldMap map[string]field.Expr
}

func (r rating) Table(newTableName string) *rating {
	r.ratingDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rating) As(alias string) *rating {
	r.ratingDo.DO = *(r.ratingDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rating) updateTableName(table string) *rating {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.ReviewID = field.NewInt64(table, "review_id")
	r.Star = field.NewInt64(table, "star")
	r.GoodsID = field.NewInt64(table, "goods_id")
	r.Average = field.NewInt64(table, "average")

	r.fillFieldMap()

	return r
}

func (r *rating) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rating) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["review_id"] = r.ReviewID
	r.fieldMap["star"] = r.Star
	r.fieldMap["goods_id"] = r.GoodsID
	r.fieldMap["average"] = r.Average
}

func (r rating) clone(db *gorm.DB) rating {
	r.ratingDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rating) replaceDB(db *gorm.DB) rating {
	r.ratingDo.ReplaceDB(db)
	return r
}

type ratingDo struct{ gen.DO }

type IRatingDo interface {
	gen.SubQuery
	Debug() IRatingDo
	WithContext(ctx context.Context) IRatingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRatingDo
	WriteDB() IRatingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRatingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRatingDo
	Not(conds ...gen.Condition) IRatingDo
	Or(conds ...gen.Condition) IRatingDo
	Select(conds ...field.Expr) IRatingDo
	Where(conds ...gen.Condition) IRatingDo
	Order(conds ...field.Expr) IRatingDo
	Distinct(cols ...field.Expr) IRatingDo
	Omit(cols ...field.Expr) IRatingDo
	Join(table schema.Tabler, on ...field.Expr) IRatingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRatingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRatingDo
	Group(cols ...field.Expr) IRatingDo
	Having(conds ...gen.Condition) IRatingDo
	Limit(limit int) IRatingDo
	Offset(offset int) IRatingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRatingDo
	Unscoped() IRatingDo
	Create(values ...*model.Rating) error
	CreateInBatches(values []*model.Rating, batchSize int) error
	Save(values ...*model.Rating) error
	First() (*model.Rating, error)
	Take() (*model.Rating, error)
	Last() (*model.Rating, error)
	Find() ([]*model.Rating, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rating, err error)
	FindInBatches(result *[]*model.Rating, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Rating) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRatingDo
	Assign(attrs ...field.AssignExpr) IRatingDo
	Joins(fields ...field.RelationField) IRatingDo
	Preload(fields ...field.RelationField) IRatingDo
	FirstOrInit() (*model.Rating, error)
	FirstOrCreate() (*model.Rating, error)
	FindByPage(offset int, limit int) (result []*model.Rating, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRatingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r ratingDo) Debug() IRatingDo {
	return r.withDO(r.DO.Debug())
}

func (r ratingDo) WithContext(ctx context.Context) IRatingDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r ratingDo) ReadDB() IRatingDo {
	return r.Clauses(dbresolver.Read)
}

func (r ratingDo) WriteDB() IRatingDo {
	return r.Clauses(dbresolver.Write)
}

func (r ratingDo) Session(config *gorm.Session) IRatingDo {
	return r.withDO(r.DO.Session(config))
}

func (r ratingDo) Clauses(conds ...clause.Expression) IRatingDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r ratingDo) Returning(value interface{}, columns ...string) IRatingDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r ratingDo) Not(conds ...gen.Condition) IRatingDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r ratingDo) Or(conds ...gen.Condition) IRatingDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r ratingDo) Select(conds ...field.Expr) IRatingDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r ratingDo) Where(conds ...gen.Condition) IRatingDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r ratingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRatingDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r ratingDo) Order(conds ...field.Expr) IRatingDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r ratingDo) Distinct(cols ...field.Expr) IRatingDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r ratingDo) Omit(cols ...field.Expr) IRatingDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r ratingDo) Join(table schema.Tabler, on ...field.Expr) IRatingDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r ratingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRatingDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r ratingDo) RightJoin(table schema.Tabler, on ...field.Expr) IRatingDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r ratingDo) Group(cols ...field.Expr) IRatingDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r ratingDo) Having(conds ...gen.Condition) IRatingDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r ratingDo) Limit(limit int) IRatingDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r ratingDo) Offset(offset int) IRatingDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r ratingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRatingDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r ratingDo) Unscoped() IRatingDo {
	return r.withDO(r.DO.Unscoped())
}

func (r ratingDo) Create(values ...*model.Rating) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r ratingDo) CreateInBatches(values []*model.Rating, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r ratingDo) Save(values ...*model.Rating) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r ratingDo) First() (*model.Rating, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rating), nil
	}
}

func (r ratingDo) Take() (*model.Rating, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rating), nil
	}
}

func (r ratingDo) Last() (*model.Rating, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rating), nil
	}
}

func (r ratingDo) Find() ([]*model.Rating, error) {
	result, err := r.DO.Find()
	return result.([]*model.Rating), err
}

func (r ratingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rating, err error) {
	buf := make([]*model.Rating, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r ratingDo) FindInBatches(result *[]*model.Rating, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r ratingDo) Attrs(attrs ...field.AssignExpr) IRatingDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r ratingDo) Assign(attrs ...field.AssignExpr) IRatingDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r ratingDo) Joins(fields ...field.RelationField) IRatingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r ratingDo) Preload(fields ...field.RelationField) IRatingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r ratingDo) FirstOrInit() (*model.Rating, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rating), nil
	}
}

func (r ratingDo) FirstOrCreate() (*model.Rating, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rating), nil
	}
}

func (r ratingDo) FindByPage(offset int, limit int) (result []*model.Rating, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r ratingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r ratingDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r ratingDo) Delete(models ...*model.Rating) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *ratingDo) withDO(do gen.Dao) *ratingDo {
	r.DO = *do.(*gen.DO)
	return r
}

// Code generated by Kitex v0.6.1. DO NOT EDIT.

package ratingservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	rating "ratings/kitex_gen/rating"
)

func serviceInfo() *kitex.ServiceInfo {
	return ratingServiceServiceInfo
}

var ratingServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RatingService"
	handlerType := (*rating.RatingService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetRating":    kitex.NewMethodInfo(getRatingHandler, newGetRatingArgs, newGetRatingResult, false),
		"CreateRating": kitex.NewMethodInfo(createRatingHandler, newCreateRatingArgs, newCreateRatingResult, false),
		"UpdateRating": kitex.NewMethodInfo(updateRatingHandler, newUpdateRatingArgs, newUpdateRatingResult, false),
		"DeleteRating": kitex.NewMethodInfo(deleteRatingHandler, newDeleteRatingArgs, newDeleteRatingResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "ratings",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func getRatingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(rating.QueryRatingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(rating.RatingService).GetRating(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetRatingArgs:
		success, err := handler.(rating.RatingService).GetRating(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetRatingResult)
		realResult.Success = success
	}
	return nil
}
func newGetRatingArgs() interface{} {
	return &GetRatingArgs{}
}

func newGetRatingResult() interface{} {
	return &GetRatingResult{}
}

type GetRatingArgs struct {
	Req *rating.QueryRatingReq
}

func (p *GetRatingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(rating.QueryRatingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetRatingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetRatingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetRatingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetRatingArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetRatingArgs) Unmarshal(in []byte) error {
	msg := new(rating.QueryRatingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetRatingArgs_Req_DEFAULT *rating.QueryRatingReq

func (p *GetRatingArgs) GetReq() *rating.QueryRatingReq {
	if !p.IsSetReq() {
		return GetRatingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetRatingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetRatingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetRatingResult struct {
	Success *rating.QueryRatingResp
}

var GetRatingResult_Success_DEFAULT *rating.QueryRatingResp

func (p *GetRatingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(rating.QueryRatingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetRatingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetRatingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetRatingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetRatingResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetRatingResult) Unmarshal(in []byte) error {
	msg := new(rating.QueryRatingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetRatingResult) GetSuccess() *rating.QueryRatingResp {
	if !p.IsSetSuccess() {
		return GetRatingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetRatingResult) SetSuccess(x interface{}) {
	p.Success = x.(*rating.QueryRatingResp)
}

func (p *GetRatingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRatingResult) GetResult() interface{} {
	return p.Success
}

func createRatingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(rating.CreateRatingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(rating.RatingService).CreateRating(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateRatingArgs:
		success, err := handler.(rating.RatingService).CreateRating(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateRatingResult)
		realResult.Success = success
	}
	return nil
}
func newCreateRatingArgs() interface{} {
	return &CreateRatingArgs{}
}

func newCreateRatingResult() interface{} {
	return &CreateRatingResult{}
}

type CreateRatingArgs struct {
	Req *rating.CreateRatingReq
}

func (p *CreateRatingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(rating.CreateRatingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateRatingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateRatingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateRatingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateRatingArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateRatingArgs) Unmarshal(in []byte) error {
	msg := new(rating.CreateRatingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateRatingArgs_Req_DEFAULT *rating.CreateRatingReq

func (p *CreateRatingArgs) GetReq() *rating.CreateRatingReq {
	if !p.IsSetReq() {
		return CreateRatingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateRatingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateRatingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateRatingResult struct {
	Success *rating.CreateRatingResp
}

var CreateRatingResult_Success_DEFAULT *rating.CreateRatingResp

func (p *CreateRatingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(rating.CreateRatingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateRatingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateRatingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateRatingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateRatingResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateRatingResult) Unmarshal(in []byte) error {
	msg := new(rating.CreateRatingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateRatingResult) GetSuccess() *rating.CreateRatingResp {
	if !p.IsSetSuccess() {
		return CreateRatingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateRatingResult) SetSuccess(x interface{}) {
	p.Success = x.(*rating.CreateRatingResp)
}

func (p *CreateRatingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateRatingResult) GetResult() interface{} {
	return p.Success
}

func updateRatingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(rating.UpdateRatingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(rating.RatingService).UpdateRating(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateRatingArgs:
		success, err := handler.(rating.RatingService).UpdateRating(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateRatingResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateRatingArgs() interface{} {
	return &UpdateRatingArgs{}
}

func newUpdateRatingResult() interface{} {
	return &UpdateRatingResult{}
}

type UpdateRatingArgs struct {
	Req *rating.UpdateRatingReq
}

func (p *UpdateRatingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(rating.UpdateRatingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateRatingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateRatingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateRatingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateRatingArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateRatingArgs) Unmarshal(in []byte) error {
	msg := new(rating.UpdateRatingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateRatingArgs_Req_DEFAULT *rating.UpdateRatingReq

func (p *UpdateRatingArgs) GetReq() *rating.UpdateRatingReq {
	if !p.IsSetReq() {
		return UpdateRatingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateRatingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateRatingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateRatingResult struct {
	Success *rating.UpdateRatingResp
}

var UpdateRatingResult_Success_DEFAULT *rating.UpdateRatingResp

func (p *UpdateRatingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(rating.UpdateRatingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateRatingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateRatingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateRatingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateRatingResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateRatingResult) Unmarshal(in []byte) error {
	msg := new(rating.UpdateRatingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateRatingResult) GetSuccess() *rating.UpdateRatingResp {
	if !p.IsSetSuccess() {
		return UpdateRatingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateRatingResult) SetSuccess(x interface{}) {
	p.Success = x.(*rating.UpdateRatingResp)
}

func (p *UpdateRatingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateRatingResult) GetResult() interface{} {
	return p.Success
}

func deleteRatingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(rating.DeleteRatingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(rating.RatingService).DeleteRating(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteRatingArgs:
		success, err := handler.(rating.RatingService).DeleteRating(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteRatingResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteRatingArgs() interface{} {
	return &DeleteRatingArgs{}
}

func newDeleteRatingResult() interface{} {
	return &DeleteRatingResult{}
}

type DeleteRatingArgs struct {
	Req *rating.DeleteRatingReq
}

func (p *DeleteRatingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(rating.DeleteRatingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteRatingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteRatingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteRatingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteRatingArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteRatingArgs) Unmarshal(in []byte) error {
	msg := new(rating.DeleteRatingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteRatingArgs_Req_DEFAULT *rating.DeleteRatingReq

func (p *DeleteRatingArgs) GetReq() *rating.DeleteRatingReq {
	if !p.IsSetReq() {
		return DeleteRatingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteRatingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteRatingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteRatingResult struct {
	Success *rating.DeleteRatingResp
}

var DeleteRatingResult_Success_DEFAULT *rating.DeleteRatingResp

func (p *DeleteRatingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(rating.DeleteRatingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteRatingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteRatingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteRatingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteRatingResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteRatingResult) Unmarshal(in []byte) error {
	msg := new(rating.DeleteRatingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteRatingResult) GetSuccess() *rating.DeleteRatingResp {
	if !p.IsSetSuccess() {
		return DeleteRatingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteRatingResult) SetSuccess(x interface{}) {
	p.Success = x.(*rating.DeleteRatingResp)
}

func (p *DeleteRatingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteRatingResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetRating(ctx context.Context, Req *rating.QueryRatingReq) (r *rating.QueryRatingResp, err error) {
	var _args GetRatingArgs
	_args.Req = Req
	var _result GetRatingResult
	if err = p.c.Call(ctx, "GetRating", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateRating(ctx context.Context, Req *rating.CreateRatingReq) (r *rating.CreateRatingResp, err error) {
	var _args CreateRatingArgs
	_args.Req = Req
	var _result CreateRatingResult
	if err = p.c.Call(ctx, "CreateRating", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRating(ctx context.Context, Req *rating.UpdateRatingReq) (r *rating.UpdateRatingResp, err error) {
	var _args UpdateRatingArgs
	_args.Req = Req
	var _result UpdateRatingResult
	if err = p.c.Call(ctx, "UpdateRating", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRating(ctx context.Context, Req *rating.DeleteRatingReq) (r *rating.DeleteRatingResp, err error) {
	var _args DeleteRatingArgs
	_args.Req = Req
	var _result DeleteRatingResult
	if err = p.c.Call(ctx, "DeleteRating", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
